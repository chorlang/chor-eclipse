/*
* generated by Xtext
*/

package org.chor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ChorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cPreambleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreamblePreambleParserRuleCall_3_0 = (RuleCall)cPreambleAssignment_3.eContents().get(0);
		private final Assignment cProceduresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProceduresProcedureParserRuleCall_4_0 = (RuleCall)cProceduresAssignment_4.eContents().get(0);
		private final Keyword cMainKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cChoreographyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cChoreographyChoreographyParserRuleCall_7_0 = (RuleCall)cChoreographyAssignment_7.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//// Main nonterminal
		//Program:
		//	"program" name=ID SEMICOLON preamble=Preamble procedures+=Procedure* "main" LCURLY choreography=Choreography RCURLY;
		public ParserRule getRule() { return rule; }

		//"program" name=ID SEMICOLON preamble=Preamble procedures+=Procedure* "main" LCURLY choreography=Choreography RCURLY
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2() { return cSEMICOLONTerminalRuleCall_2; }

		//preamble=Preamble
		public Assignment getPreambleAssignment_3() { return cPreambleAssignment_3; }

		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_3_0() { return cPreamblePreambleParserRuleCall_3_0; }

		//procedures+=Procedure*
		public Assignment getProceduresAssignment_4() { return cProceduresAssignment_4; }

		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_4_0() { return cProceduresProcedureParserRuleCall_4_0; }

		//"main"
		public Keyword getMainKeyword_5() { return cMainKeyword_5; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6() { return cLCURLYTerminalRuleCall_6; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_7() { return cChoreographyAssignment_7; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_7_0() { return cChoreographyChoreographyParserRuleCall_7_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_8() { return cRCURLYTerminalRuleCall_8; }
	}

	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreambleAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProtocolsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProtocolsProtocolParserRuleCall_1_0_0 = (RuleCall)cProtocolsAssignment_1_0.eContents().get(0);
		private final Assignment cSiteAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSiteSiteParserRuleCall_1_1_0 = (RuleCall)cSiteAssignment_1_1.eContents().get(0);
		
		//// Preamble of a program
		//Preamble:
		//	{Preamble} (protocols+=Protocol // Protocol definitions
		//	// Site definitions
		//	| site+=Site)*;
		public ParserRule getRule() { return rule; }

		//{Preamble} (protocols+=Protocol // Protocol definitions
		//// Site definitions
		//| site+=Site)*
		public Group getGroup() { return cGroup; }

		//{Preamble}
		public Action getPreambleAction_0() { return cPreambleAction_0; }

		//(protocols+=Protocol // Protocol definitions
		//// Site definitions
		//| site+=Site)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//protocols+=Protocol
		public Assignment getProtocolsAssignment_1_0() { return cProtocolsAssignment_1_0; }

		//Protocol
		public RuleCall getProtocolsProtocolParserRuleCall_1_0_0() { return cProtocolsProtocolParserRuleCall_1_0_0; }

		//site+=Site
		public Assignment getSiteAssignment_1_1() { return cSiteAssignment_1_1; }

		//Site
		public RuleCall getSiteSiteParserRuleCall_1_1_0() { return cSiteSiteParserRuleCall_1_1_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cThreadParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThreadParametersIDTerminalRuleCall_3_0 = (RuleCall)cThreadParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cThreadParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cThreadParametersIDTerminalRuleCall_4_1_0 = (RuleCall)cThreadParametersAssignment_4_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cLPARENTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cSessionParametersAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSessionParametersSessionProcedureParameterParserRuleCall_7_0_0 = (RuleCall)cSessionParametersAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_7_1_0 = (RuleCall)cGroup_7_1.eContents().get(0);
		private final Assignment cSessionParametersAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cSessionParametersSessionProcedureParameterParserRuleCall_7_1_1_0 = (RuleCall)cSessionParametersAssignment_7_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cLCURLYTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cChoreographyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cChoreographyChoreographyParserRuleCall_10_0 = (RuleCall)cChoreographyAssignment_10.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//// Procedure definition, e.g. define myProcedure( thread )( k: protocol ) { Choreography }
		//Procedure:
		//	"define" name=ID LPAREN threadParameters+=ID (COMMA threadParameters+=ID)* RPAREN LPAREN
		//	(sessionParameters+=SessionProcedureParameter (COMMA sessionParameters+=SessionProcedureParameter)*)? RPAREN LCURLY
		//	choreography=Choreography RCURLY;
		public ParserRule getRule() { return rule; }

		//"define" name=ID LPAREN threadParameters+=ID (COMMA threadParameters+=ID)* RPAREN LPAREN
		//(sessionParameters+=SessionProcedureParameter (COMMA sessionParameters+=SessionProcedureParameter)*)? RPAREN LCURLY
		//choreography=Choreography RCURLY
		public Group getGroup() { return cGroup; }

		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }

		//threadParameters+=ID
		public Assignment getThreadParametersAssignment_3() { return cThreadParametersAssignment_3; }

		//ID
		public RuleCall getThreadParametersIDTerminalRuleCall_3_0() { return cThreadParametersIDTerminalRuleCall_3_0; }

		//(COMMA threadParameters+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }

		//threadParameters+=ID
		public Assignment getThreadParametersAssignment_4_1() { return cThreadParametersAssignment_4_1; }

		//ID
		public RuleCall getThreadParametersIDTerminalRuleCall_4_1_0() { return cThreadParametersIDTerminalRuleCall_4_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_5() { return cRPARENTerminalRuleCall_5; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_6() { return cLPARENTerminalRuleCall_6; }

		//(sessionParameters+=SessionProcedureParameter (COMMA sessionParameters+=SessionProcedureParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//sessionParameters+=SessionProcedureParameter
		public Assignment getSessionParametersAssignment_7_0() { return cSessionParametersAssignment_7_0; }

		//SessionProcedureParameter
		public RuleCall getSessionParametersSessionProcedureParameterParserRuleCall_7_0_0() { return cSessionParametersSessionProcedureParameterParserRuleCall_7_0_0; }

		//(COMMA sessionParameters+=SessionProcedureParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7_1_0() { return cCOMMATerminalRuleCall_7_1_0; }

		//sessionParameters+=SessionProcedureParameter
		public Assignment getSessionParametersAssignment_7_1_1() { return cSessionParametersAssignment_7_1_1; }

		//SessionProcedureParameter
		public RuleCall getSessionParametersSessionProcedureParameterParserRuleCall_7_1_1_0() { return cSessionParametersSessionProcedureParameterParserRuleCall_7_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_8() { return cRPARENTerminalRuleCall_8; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_9() { return cLCURLYTerminalRuleCall_9; }

		//choreography=Choreography
		public Assignment getChoreographyAssignment_10() { return cChoreographyAssignment_10; }

		//Choreography
		public RuleCall getChoreographyChoreographyParserRuleCall_10_0() { return cChoreographyChoreographyParserRuleCall_10_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_11() { return cRCURLYTerminalRuleCall_11; }
	}

	public class SessionProcedureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SessionProcedureParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSessionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSessionIDTerminalRuleCall_0_0 = (RuleCall)cSessionAssignment_0.eContents().get(0);
		private final RuleCall cLSQUARETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGlobalTypeCallParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cActiveThreadsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActiveThreadsThreadWithRoleParserRuleCall_4_0 = (RuleCall)cActiveThreadsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cActiveThreadsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActiveThreadsThreadWithRoleParserRuleCall_5_1_0 = (RuleCall)cActiveThreadsAssignment_5_1.eContents().get(0);
		private final RuleCall cRSQUARETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//SessionProcedureParameter:
		//	session=ID LSQUARE type=GlobalTypeCall COLON activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)*
		//	RSQUARE;
		public ParserRule getRule() { return rule; }

		//session=ID LSQUARE type=GlobalTypeCall COLON activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)*
		//RSQUARE
		public Group getGroup() { return cGroup; }

		//session=ID
		public Assignment getSessionAssignment_0() { return cSessionAssignment_0; }

		//ID
		public RuleCall getSessionIDTerminalRuleCall_0_0() { return cSessionIDTerminalRuleCall_0_0; }

		//LSQUARE
		public RuleCall getLSQUARETerminalRuleCall_1() { return cLSQUARETerminalRuleCall_1; }

		//type=GlobalTypeCall
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//GlobalTypeCall
		public RuleCall getTypeGlobalTypeCallParserRuleCall_2_0() { return cTypeGlobalTypeCallParserRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//activeThreads+=ThreadWithRole
		public Assignment getActiveThreadsAssignment_4() { return cActiveThreadsAssignment_4; }

		//ThreadWithRole
		public RuleCall getActiveThreadsThreadWithRoleParserRuleCall_4_0() { return cActiveThreadsThreadWithRoleParserRuleCall_4_0; }

		//(COMMA activeThreads+=ThreadWithRole)*
		public Group getGroup_5() { return cGroup_5; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_5_0() { return cCOMMATerminalRuleCall_5_0; }

		//activeThreads+=ThreadWithRole
		public Assignment getActiveThreadsAssignment_5_1() { return cActiveThreadsAssignment_5_1; }

		//ThreadWithRole
		public RuleCall getActiveThreadsThreadWithRoleParserRuleCall_5_1_0() { return cActiveThreadsThreadWithRoleParserRuleCall_5_1_0; }

		//RSQUARE
		public RuleCall getRSQUARETerminalRuleCall_6() { return cRSQUARETerminalRuleCall_6; }
	}

	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeGlobalTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// Definition of a protocol, associating a name to a multiparty behavioural type.
		//Protocol:
		//	"protocol" name=ID LCURLY type=GlobalType RCURLY;
		public ParserRule getRule() { return rule; }

		//"protocol" name=ID LCURLY type=GlobalType RCURLY
		public Group getGroup() { return cGroup; }

		//"protocol"
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_2() { return cLCURLYTerminalRuleCall_2; }

		//type=GlobalType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//GlobalType
		public RuleCall getTypeGlobalTypeParserRuleCall_3_0() { return cTypeGlobalTypeParserRuleCall_3_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_4() { return cRCURLYTerminalRuleCall_4; }
	}

	public class SiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Site");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cProtocolAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cProtocolProtocolCrossReference_3_0 = (CrossReference)cProtocolAssignment_3.eContents().get(0);
		private final RuleCall cProtocolProtocolIDTerminalRuleCall_3_0_1 = (RuleCall)cProtocolProtocolCrossReference_3_0.eContents().get(1);
		
		//// Definition of a site, associating a public channel name to a protocol.
		//Site:
		//	"public" name=ID COLON protocol=[Protocol];
		public ParserRule getRule() { return rule; }

		//"public" name=ID COLON protocol=[Protocol]
		public Group getGroup() { return cGroup; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_2() { return cCOLONTerminalRuleCall_2; }

		//protocol=[Protocol]
		public Assignment getProtocolAssignment_3() { return cProtocolAssignment_3; }

		//[Protocol]
		public CrossReference getProtocolProtocolCrossReference_3_0() { return cProtocolProtocolCrossReference_3_0; }

		//ID
		public RuleCall getProtocolProtocolIDTerminalRuleCall_3_0_1() { return cProtocolProtocolIDTerminalRuleCall_3_0_1; }
	}

	public class GlobalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalTypeInteractionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalTypeCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * 
		// * Multiparty behavioural type, or global type.
		// * Also denoted by G in the comments, for brevity (referring to the theoretical papers).
		// * / GlobalType:
		//	GlobalTypeInteraction | GlobalTypeCall;
		public ParserRule getRule() { return rule; }

		//GlobalTypeInteraction | GlobalTypeCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalTypeInteraction
		public RuleCall getGlobalTypeInteractionParserRuleCall_0() { return cGlobalTypeInteractionParserRuleCall_0; }

		//GlobalTypeCall
		public RuleCall getGlobalTypeCallParserRuleCall_1() { return cGlobalTypeCallParserRuleCall_1; }
	}

	public class GlobalTypeInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalTypeInteraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSenderIDTerminalRuleCall_0_0 = (RuleCall)cSenderAssignment_0.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReceiverAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReceiverIDTerminalRuleCall_2_0 = (RuleCall)cReceiverAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cBranchesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cBranchesBranchGTypeParserRuleCall_4_0_0 = (RuleCall)cBranchesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final RuleCall cLCURLYTerminalRuleCall_4_1_0 = (RuleCall)cGroup_4_1.eContents().get(0);
		private final Assignment cBranchesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cBranchesBranchGTypeParserRuleCall_4_1_1_0 = (RuleCall)cBranchesAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_4_1_2_0 = (RuleCall)cGroup_4_1_2.eContents().get(0);
		private final Assignment cBranchesAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cBranchesBranchGTypeParserRuleCall_4_1_2_1_0 = (RuleCall)cBranchesAssignment_4_1_2_1.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_4_1_3 = (RuleCall)cGroup_4_1.eContents().get(3);
		
		//// Interaction. Example: A -> B: op(string); G
		//GlobalTypeInteraction:
		//	sender=ID ARROW receiver=ID COLON (branches+=BranchGType | LCURLY branches+=BranchGType (COMMA branches+=BranchGType)*
		//	RCURLY);
		public ParserRule getRule() { return rule; }

		//sender=ID ARROW receiver=ID COLON (branches+=BranchGType | LCURLY branches+=BranchGType (COMMA branches+=BranchGType)*
		//RCURLY)
		public Group getGroup() { return cGroup; }

		//sender=ID
		public Assignment getSenderAssignment_0() { return cSenderAssignment_0; }

		//ID
		public RuleCall getSenderIDTerminalRuleCall_0_0() { return cSenderIDTerminalRuleCall_0_0; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_1() { return cARROWTerminalRuleCall_1; }

		//receiver=ID
		public Assignment getReceiverAssignment_2() { return cReceiverAssignment_2; }

		//ID
		public RuleCall getReceiverIDTerminalRuleCall_2_0() { return cReceiverIDTerminalRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//branches+=BranchGType | LCURLY branches+=BranchGType (COMMA branches+=BranchGType)* RCURLY
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//branches+=BranchGType
		public Assignment getBranchesAssignment_4_0() { return cBranchesAssignment_4_0; }

		//BranchGType
		public RuleCall getBranchesBranchGTypeParserRuleCall_4_0_0() { return cBranchesBranchGTypeParserRuleCall_4_0_0; }

		//LCURLY branches+=BranchGType (COMMA branches+=BranchGType)* RCURLY
		public Group getGroup_4_1() { return cGroup_4_1; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_4_1_0() { return cLCURLYTerminalRuleCall_4_1_0; }

		//branches+=BranchGType
		public Assignment getBranchesAssignment_4_1_1() { return cBranchesAssignment_4_1_1; }

		//BranchGType
		public RuleCall getBranchesBranchGTypeParserRuleCall_4_1_1_0() { return cBranchesBranchGTypeParserRuleCall_4_1_1_0; }

		//(COMMA branches+=BranchGType)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_1_2_0() { return cCOMMATerminalRuleCall_4_1_2_0; }

		//branches+=BranchGType
		public Assignment getBranchesAssignment_4_1_2_1() { return cBranchesAssignment_4_1_2_1; }

		//BranchGType
		public RuleCall getBranchesBranchGTypeParserRuleCall_4_1_2_1_0() { return cBranchesBranchGTypeParserRuleCall_4_1_2_1_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_4_1_3() { return cRCURLYTerminalRuleCall_4_1_3; }
	}

	public class GlobalTypeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalTypeCall");
		private final Assignment cProtocolAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cProtocolProtocolCrossReference_0 = (CrossReference)cProtocolAssignment.eContents().get(0);
		private final RuleCall cProtocolProtocolIDTerminalRuleCall_0_1 = (RuleCall)cProtocolProtocolCrossReference_0.eContents().get(1);
		
		//// Protocol call
		//GlobalTypeCall:
		//	protocol=[Protocol];
		public ParserRule getRule() { return rule; }

		//protocol=[Protocol]
		public Assignment getProtocolAssignment() { return cProtocolAssignment; }

		//[Protocol]
		public CrossReference getProtocolProtocolCrossReference_0() { return cProtocolProtocolCrossReference_0; }

		//ID
		public RuleCall getProtocolProtocolIDTerminalRuleCall_0_1() { return cProtocolProtocolIDTerminalRuleCall_0_1; }
	}

	public class BranchGTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchGType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationIDTerminalRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDataTypeParserRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cSEMICOLONTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cContinuationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContinuationGlobalTypeParserRuleCall_4_1_0 = (RuleCall)cContinuationAssignment_4_1.eContents().get(0);
		
		//// Type of a branch. Example: op(DataType); G
		//BranchGType:
		//	operation=ID LPAREN dataType=DataType RPAREN (SEMICOLON continuation=GlobalType)?;
		public ParserRule getRule() { return rule; }

		//operation=ID LPAREN dataType=DataType RPAREN (SEMICOLON continuation=GlobalType)?
		public Group getGroup() { return cGroup; }

		//operation=ID
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_0_0() { return cOperationIDTerminalRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_2_0() { return cDataTypeDataTypeParserRuleCall_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }

		//(SEMICOLON continuation=GlobalType)?
		public Group getGroup_4() { return cGroup_4; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4_0() { return cSEMICOLONTerminalRuleCall_4_0; }

		//continuation=GlobalType
		public Assignment getContinuationAssignment_4_1() { return cContinuationAssignment_4_1; }

		//GlobalType
		public RuleCall getContinuationGlobalTypeParserRuleCall_4_1_0() { return cContinuationGlobalTypeParserRuleCall_4_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelegationTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Data types. 
		//DataType:
		//	BasicType | DelegationType;
		public ParserRule getRule() { return rule; }

		//BasicType | DelegationType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//DelegationType
		public RuleCall getDelegationTypeParserRuleCall_1() { return cDelegationTypeParserRuleCall_1; }
	}

	public class DelegationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelegationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeGlobalTypeCallParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleIDTerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		
		//// Type for a carried delegated session
		//DelegationType:
		//	type=GlobalTypeCall AT role=ID;
		public ParserRule getRule() { return rule; }

		//type=GlobalTypeCall AT role=ID
		public Group getGroup() { return cGroup; }

		//type=GlobalTypeCall
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//GlobalTypeCall
		public RuleCall getTypeGlobalTypeCallParserRuleCall_0_0() { return cTypeGlobalTypeCallParserRuleCall_0_0; }

		//AT
		public RuleCall getATTerminalRuleCall_1() { return cATTerminalRuleCall_1; }

		//role=ID
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_0() { return cRoleIDTerminalRuleCall_2_0; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBasicTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameIntKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameStringKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameBoolKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameVoidKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		
		//// Basic types. Example: int
		//BasicType:
		//	{BasicType} name="int" | name="string" | name="bool" | name="void";
		public ParserRule getRule() { return rule; }

		//{BasicType} name="int" | name="string" | name="bool" | name="void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BasicType} name="int"
		public Group getGroup_0() { return cGroup_0; }

		//{BasicType}
		public Action getBasicTypeAction_0_0() { return cBasicTypeAction_0_0; }

		//name="int"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"int"
		public Keyword getNameIntKeyword_0_1_0() { return cNameIntKeyword_0_1_0; }

		//name="string"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"string"
		public Keyword getNameStringKeyword_1_0() { return cNameStringKeyword_1_0; }

		//name="bool"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"bool"
		public Keyword getNameBoolKeyword_2_0() { return cNameBoolKeyword_2_0; }

		//name="void"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"void"
		public Keyword getNameVoidKeyword_3_0() { return cNameVoidKeyword_3_0; }
	}

	public class ChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choreography");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDelegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfThenElseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLocalCodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cLCURLYTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final RuleCall cChoreographyParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cRCURLYTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		
		/// **
		// * A choreography.
		// * TODO: introduce recursion
		// * / Choreography:
		//	Start | Interaction | Delegation | Call | IfThenElse | LocalCode | LCURLY Choreography RCURLY;
		public ParserRule getRule() { return rule; }

		//Start | Interaction | Delegation | Call | IfThenElse | LocalCode | LCURLY Choreography RCURLY
		public Alternatives getAlternatives() { return cAlternatives; }

		//Start
		public RuleCall getStartParserRuleCall_0() { return cStartParserRuleCall_0; }

		//Interaction
		public RuleCall getInteractionParserRuleCall_1() { return cInteractionParserRuleCall_1; }

		//Delegation
		public RuleCall getDelegationParserRuleCall_2() { return cDelegationParserRuleCall_2; }

		//Call
		public RuleCall getCallParserRuleCall_3() { return cCallParserRuleCall_3; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_4() { return cIfThenElseParserRuleCall_4; }

		//LocalCode
		public RuleCall getLocalCodeParserRuleCall_5() { return cLocalCodeParserRuleCall_5; }

		//LCURLY Choreography RCURLY
		public Group getGroup_6() { return cGroup_6; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_6_0() { return cLCURLYTerminalRuleCall_6_0; }

		//Choreography
		public RuleCall getChoreographyParserRuleCall_6_1() { return cChoreographyParserRuleCall_6_1; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_6_2() { return cRCURLYTerminalRuleCall_6_2; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActiveThreadsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActiveThreadsThreadWithRoleParserRuleCall_0_0 = (RuleCall)cActiveThreadsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cActiveThreadsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActiveThreadsThreadWithRoleParserRuleCall_1_1_0 = (RuleCall)cActiveThreadsAssignment_1_1.eContents().get(0);
		private final Keyword cStartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cServiceThreadsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cServiceThreadsThreadWithRoleParserRuleCall_3_0_0 = (RuleCall)cServiceThreadsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cServiceThreadsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cServiceThreadsThreadWithRoleParserRuleCall_3_1_1_0 = (RuleCall)cServiceThreadsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPublicChannelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPublicChannelSiteCrossReference_5_0 = (CrossReference)cPublicChannelAssignment_5.eContents().get(0);
		private final RuleCall cPublicChannelSiteIDTerminalRuleCall_5_0_1 = (RuleCall)cPublicChannelSiteCrossReference_5_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cSessionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSessionIDTerminalRuleCall_7_0 = (RuleCall)cSessionAssignment_7.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cSEMICOLONTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cContinuationAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_9_1_0 = (RuleCall)cContinuationAssignment_9_1.eContents().get(0);
		
		/// **
		// * Multiparty session start.
		// * Example: t1[role1],t2[role2] start t3[role3]: a(k)
		// * / Start: // List of active threads
		//	activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)* "start" // List of service threads
		//	(serviceThreads+=ThreadWithRole (COMMA serviceThreads+=ThreadWithRole)*)? COLON // Public channel name
		//	publicChannel=[Site] // Protocol name
		//	//LSQUARE protocol = ID RSQUARE
		//	// Private session name
		//	LPAREN session=ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		//;
		public ParserRule getRule() { return rule; }

		//// List of active threads
		//activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)* "start" // List of service threads
		//(serviceThreads+=ThreadWithRole (COMMA serviceThreads+=ThreadWithRole)*)? COLON // Public channel name
		//publicChannel=[Site] // Protocol name
		////LSQUARE protocol = ID RSQUARE
		//// Private session name
		//LPAREN session=ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		public Group getGroup() { return cGroup; }

		//// List of active threads
		//activeThreads+=ThreadWithRole
		public Assignment getActiveThreadsAssignment_0() { return cActiveThreadsAssignment_0; }

		//ThreadWithRole
		public RuleCall getActiveThreadsThreadWithRoleParserRuleCall_0_0() { return cActiveThreadsThreadWithRoleParserRuleCall_0_0; }

		//(COMMA activeThreads+=ThreadWithRole)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//activeThreads+=ThreadWithRole
		public Assignment getActiveThreadsAssignment_1_1() { return cActiveThreadsAssignment_1_1; }

		//ThreadWithRole
		public RuleCall getActiveThreadsThreadWithRoleParserRuleCall_1_1_0() { return cActiveThreadsThreadWithRoleParserRuleCall_1_1_0; }

		//"start"
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }

		//(serviceThreads+=ThreadWithRole (COMMA serviceThreads+=ThreadWithRole)*)?
		public Group getGroup_3() { return cGroup_3; }

		//serviceThreads+=ThreadWithRole
		public Assignment getServiceThreadsAssignment_3_0() { return cServiceThreadsAssignment_3_0; }

		//ThreadWithRole
		public RuleCall getServiceThreadsThreadWithRoleParserRuleCall_3_0_0() { return cServiceThreadsThreadWithRoleParserRuleCall_3_0_0; }

		//(COMMA serviceThreads+=ThreadWithRole)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_1_0() { return cCOMMATerminalRuleCall_3_1_0; }

		//serviceThreads+=ThreadWithRole
		public Assignment getServiceThreadsAssignment_3_1_1() { return cServiceThreadsAssignment_3_1_1; }

		//ThreadWithRole
		public RuleCall getServiceThreadsThreadWithRoleParserRuleCall_3_1_1_0() { return cServiceThreadsThreadWithRoleParserRuleCall_3_1_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_4() { return cCOLONTerminalRuleCall_4; }

		//// Public channel name
		//publicChannel=[Site]
		public Assignment getPublicChannelAssignment_5() { return cPublicChannelAssignment_5; }

		//[Site]
		public CrossReference getPublicChannelSiteCrossReference_5_0() { return cPublicChannelSiteCrossReference_5_0; }

		//ID
		public RuleCall getPublicChannelSiteIDTerminalRuleCall_5_0_1() { return cPublicChannelSiteIDTerminalRuleCall_5_0_1; }

		//// Protocol name
		////LSQUARE protocol = ID RSQUARE
		//// Private session name
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_6() { return cLPARENTerminalRuleCall_6; }

		//session=ID
		public Assignment getSessionAssignment_7() { return cSessionAssignment_7; }

		//ID
		public RuleCall getSessionIDTerminalRuleCall_7_0() { return cSessionIDTerminalRuleCall_7_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_8() { return cRPARENTerminalRuleCall_8; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_9() { return cGroup_9; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_9_0() { return cSEMICOLONTerminalRuleCall_9_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_9_1() { return cContinuationAssignment_9_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_9_1_0() { return cContinuationChoreographyParserRuleCall_9_1_0; }
	}

	public class ThreadWithRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThreadWithRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThreadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThreadIDTerminalRuleCall_0_0 = (RuleCall)cThreadAssignment_0.eContents().get(0);
		private final RuleCall cLSQUARETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoleIDTerminalRuleCall_2_0 = (RuleCall)cRoleAssignment_2.eContents().get(0);
		private final RuleCall cRSQUARETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// A thread with a role. Example: myThread[MyRole]
		//ThreadWithRole:
		//	thread=ID LSQUARE role=ID RSQUARE;
		public ParserRule getRule() { return rule; }

		//thread=ID LSQUARE role=ID RSQUARE
		public Group getGroup() { return cGroup; }

		//thread=ID
		public Assignment getThreadAssignment_0() { return cThreadAssignment_0; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_0_0() { return cThreadIDTerminalRuleCall_0_0; }

		//LSQUARE
		public RuleCall getLSQUARETerminalRuleCall_1() { return cLSQUARETerminalRuleCall_1; }

		//role=ID
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }

		//ID
		public RuleCall getRoleIDTerminalRuleCall_2_0() { return cRoleIDTerminalRuleCall_2_0; }

		//RSQUARE
		public RuleCall getRSQUARETerminalRuleCall_3() { return cRSQUARETerminalRuleCall_3; }
	}

	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSenderIDTerminalRuleCall_0_0 = (RuleCall)cSenderAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cSenderExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSenderExpressionExpressionBasicTermParserRuleCall_1_1_0 = (RuleCall)cSenderExpressionAssignment_1_1.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cReceiverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReceiverIDTerminalRuleCall_3_0 = (RuleCall)cReceiverAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cDOTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cReceiverVariableAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReceiverVariableIDTerminalRuleCall_4_1_0 = (RuleCall)cReceiverVariableAssignment_4_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cOperationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationIDTerminalRuleCall_6_0 = (RuleCall)cOperationAssignment_6.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cSessionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSessionIDTerminalRuleCall_8_0 = (RuleCall)cSessionAssignment_8.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final RuleCall cSEMICOLONTerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Assignment cContinuationAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_10_1_0 = (RuleCall)cContinuationAssignment_10_1.eContents().get(0);
		
		/// ** 
		// * Interaction (data communication). Example: t1.(x + 2) -> t2.y : op(k)
		// * / Interaction:
		//	sender= // The sender thread
		//	ID (DOT senderExpression=ExpressionBasicTerm)? // The expression whose evaluation has to be sent
		//	ARROW receiver= // The receiver thread
		//	ID (DOT receiverVariable=ID)? // The variable in which the receiver stores the received value
		//	COLON operation=ID LPAREN session= // The session of the interaction
		//	ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		//;
		public ParserRule getRule() { return rule; }

		//sender= // The sender thread
		//ID (DOT senderExpression=ExpressionBasicTerm)? // The expression whose evaluation has to be sent
		//ARROW receiver= // The receiver thread
		//ID (DOT receiverVariable=ID)? // The variable in which the receiver stores the received value
		//COLON operation=ID LPAREN session= // The session of the interaction
		//ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		public Group getGroup() { return cGroup; }

		//sender= // The sender thread
		//ID
		public Assignment getSenderAssignment_0() { return cSenderAssignment_0; }

		//// The sender thread
		//ID
		public RuleCall getSenderIDTerminalRuleCall_0_0() { return cSenderIDTerminalRuleCall_0_0; }

		//(DOT senderExpression=ExpressionBasicTerm)?
		public Group getGroup_1() { return cGroup_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }

		//senderExpression=ExpressionBasicTerm
		public Assignment getSenderExpressionAssignment_1_1() { return cSenderExpressionAssignment_1_1; }

		//ExpressionBasicTerm
		public RuleCall getSenderExpressionExpressionBasicTermParserRuleCall_1_1_0() { return cSenderExpressionExpressionBasicTermParserRuleCall_1_1_0; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_2() { return cARROWTerminalRuleCall_2; }

		//receiver= // The receiver thread
		//ID
		public Assignment getReceiverAssignment_3() { return cReceiverAssignment_3; }

		//// The receiver thread
		//ID
		public RuleCall getReceiverIDTerminalRuleCall_3_0() { return cReceiverIDTerminalRuleCall_3_0; }

		//(DOT receiverVariable=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_4_0() { return cDOTTerminalRuleCall_4_0; }

		//receiverVariable=ID
		public Assignment getReceiverVariableAssignment_4_1() { return cReceiverVariableAssignment_4_1; }

		//ID
		public RuleCall getReceiverVariableIDTerminalRuleCall_4_1_0() { return cReceiverVariableIDTerminalRuleCall_4_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_5() { return cCOLONTerminalRuleCall_5; }

		//operation=ID
		public Assignment getOperationAssignment_6() { return cOperationAssignment_6; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_6_0() { return cOperationIDTerminalRuleCall_6_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_7() { return cLPARENTerminalRuleCall_7; }

		//session= // The session of the interaction
		//ID
		public Assignment getSessionAssignment_8() { return cSessionAssignment_8; }

		//// The session of the interaction
		//ID
		public RuleCall getSessionIDTerminalRuleCall_8_0() { return cSessionIDTerminalRuleCall_8_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_9() { return cRPARENTerminalRuleCall_9; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_10() { return cGroup_10; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_10_0() { return cSEMICOLONTerminalRuleCall_10_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_10_1() { return cContinuationAssignment_10_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_10_1_0() { return cContinuationChoreographyParserRuleCall_10_1_0; }
	}

	public class DelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSenderIDTerminalRuleCall_0_0 = (RuleCall)cSenderAssignment_0.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cReceiverAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReceiverIDTerminalRuleCall_2_0 = (RuleCall)cReceiverAssignment_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationIDTerminalRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cSessionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSessionIDTerminalRuleCall_6_0 = (RuleCall)cSessionAssignment_6.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cDelegatedSessionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDelegatedSessionIDTerminalRuleCall_8_0 = (RuleCall)cDelegatedSessionAssignment_8.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cRPARENTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final RuleCall cSEMICOLONTerminalRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Assignment cContinuationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_11_1_0 = (RuleCall)cContinuationAssignment_11_1.eContents().get(0);
		
		/// ** 
		// * Delegation (session communication). Example: t1 -> t2 : op(k(k'))
		// * / Delegation:
		//	sender= // The sender thread
		//	ID ARROW receiver= // The receiver thread
		//	ID COLON operation=ID LPAREN session= // The session of the interaction
		//	ID LPAREN delegatedSession= // The delegated session
		//	ID RPAREN RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		//;
		public ParserRule getRule() { return rule; }

		//sender= // The sender thread
		//ID ARROW receiver= // The receiver thread
		//ID COLON operation=ID LPAREN session= // The session of the interaction
		//ID LPAREN delegatedSession= // The delegated session
		//ID RPAREN RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		public Group getGroup() { return cGroup; }

		//sender= // The sender thread
		//ID
		public Assignment getSenderAssignment_0() { return cSenderAssignment_0; }

		//// The sender thread
		//ID
		public RuleCall getSenderIDTerminalRuleCall_0_0() { return cSenderIDTerminalRuleCall_0_0; }

		//ARROW
		public RuleCall getARROWTerminalRuleCall_1() { return cARROWTerminalRuleCall_1; }

		//receiver= // The receiver thread
		//ID
		public Assignment getReceiverAssignment_2() { return cReceiverAssignment_2; }

		//// The receiver thread
		//ID
		public RuleCall getReceiverIDTerminalRuleCall_2_0() { return cReceiverIDTerminalRuleCall_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_3() { return cCOLONTerminalRuleCall_3; }

		//operation=ID
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//ID
		public RuleCall getOperationIDTerminalRuleCall_4_0() { return cOperationIDTerminalRuleCall_4_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_5() { return cLPARENTerminalRuleCall_5; }

		//session= // The session of the interaction
		//ID
		public Assignment getSessionAssignment_6() { return cSessionAssignment_6; }

		//// The session of the interaction
		//ID
		public RuleCall getSessionIDTerminalRuleCall_6_0() { return cSessionIDTerminalRuleCall_6_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_7() { return cLPARENTerminalRuleCall_7; }

		//delegatedSession= // The delegated session
		//ID
		public Assignment getDelegatedSessionAssignment_8() { return cDelegatedSessionAssignment_8; }

		//// The delegated session
		//ID
		public RuleCall getDelegatedSessionIDTerminalRuleCall_8_0() { return cDelegatedSessionIDTerminalRuleCall_8_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_9() { return cRPARENTerminalRuleCall_9; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_10() { return cRPARENTerminalRuleCall_10; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_11() { return cGroup_11; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_11_0() { return cSEMICOLONTerminalRuleCall_11_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_11_1() { return cContinuationAssignment_11_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_11_1_0() { return cContinuationChoreographyParserRuleCall_11_1_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcedureProcedureCrossReference_0_0 = (CrossReference)cProcedureAssignment_0.eContents().get(0);
		private final RuleCall cProcedureProcedureIDTerminalRuleCall_0_0_1 = (RuleCall)cProcedureProcedureCrossReference_0_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThreadsIDTerminalRuleCall_2_0 = (RuleCall)cThreadsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cThreadsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cThreadsIDTerminalRuleCall_3_1_0 = (RuleCall)cThreadsAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cLPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cSessionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cSessionsIDTerminalRuleCall_6_0_0 = (RuleCall)cSessionsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_6_1_0 = (RuleCall)cGroup_6_1.eContents().get(0);
		private final Assignment cSessionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cSessionsIDTerminalRuleCall_6_1_1_0 = (RuleCall)cSessionsAssignment_6_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		/// *
		// * A procedure call, e.g. myProc( thread[Role], thread2[Role2] )( k, k2 )
		// * / Call:
		//	procedure=[Procedure] LPAREN threads+=ID (COMMA threads+=ID)* RPAREN LPAREN (sessions+=ID (COMMA sessions+=ID)*)?
		//	RPAREN;
		public ParserRule getRule() { return rule; }

		//procedure=[Procedure] LPAREN threads+=ID (COMMA threads+=ID)* RPAREN LPAREN (sessions+=ID (COMMA sessions+=ID)*)? RPAREN
		public Group getGroup() { return cGroup; }

		//procedure=[Procedure]
		public Assignment getProcedureAssignment_0() { return cProcedureAssignment_0; }

		//[Procedure]
		public CrossReference getProcedureProcedureCrossReference_0_0() { return cProcedureProcedureCrossReference_0_0; }

		//ID
		public RuleCall getProcedureProcedureIDTerminalRuleCall_0_0_1() { return cProcedureProcedureIDTerminalRuleCall_0_0_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//threads+=ID
		public Assignment getThreadsAssignment_2() { return cThreadsAssignment_2; }

		//ID
		public RuleCall getThreadsIDTerminalRuleCall_2_0() { return cThreadsIDTerminalRuleCall_2_0; }

		//(COMMA threads+=ID)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//threads+=ID
		public Assignment getThreadsAssignment_3_1() { return cThreadsAssignment_3_1; }

		//ID
		public RuleCall getThreadsIDTerminalRuleCall_3_1_0() { return cThreadsIDTerminalRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_5() { return cLPARENTerminalRuleCall_5; }

		//(sessions+=ID (COMMA sessions+=ID)*)?
		public Group getGroup_6() { return cGroup_6; }

		//sessions+=ID
		public Assignment getSessionsAssignment_6_0() { return cSessionsAssignment_6_0; }

		//ID
		public RuleCall getSessionsIDTerminalRuleCall_6_0_0() { return cSessionsIDTerminalRuleCall_6_0_0; }

		//(COMMA sessions+=ID)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_6_1_0() { return cCOMMATerminalRuleCall_6_1_0; }

		//sessions+=ID
		public Assignment getSessionsAssignment_6_1_1() { return cSessionsAssignment_6_1_1; }

		//ID
		public RuleCall getSessionsIDTerminalRuleCall_6_1_1_0() { return cSessionsIDTerminalRuleCall_6_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_7() { return cRPARENTerminalRuleCall_7; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cATTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cThreadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThreadIDTerminalRuleCall_5_0 = (RuleCall)cThreadAssignment_5.eContents().get(0);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenChoreographyParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cElseAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cElseChoreographyParserRuleCall_7_1_0 = (RuleCall)cElseAssignment_7_1.eContents().get(0);
		
		/// **
		// * if (condition)@thread { Choreography } else { Choreography }
		// * / IfThenElse:
		//	"if" LPAREN condition=Condition RPAREN AT thread=ID then=Choreography ("else" else=Choreography)?;
		public ParserRule getRule() { return rule; }

		//"if" LPAREN condition=Condition RPAREN AT thread=ID then=Choreography ("else" else=Choreography)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }

		//AT
		public RuleCall getATTerminalRuleCall_4() { return cATTerminalRuleCall_4; }

		//thread=ID
		public Assignment getThreadAssignment_5() { return cThreadAssignment_5; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_5_0() { return cThreadIDTerminalRuleCall_5_0; }

		//then=Choreography
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }

		//Choreography
		public RuleCall getThenChoreographyParserRuleCall_6_0() { return cThenChoreographyParserRuleCall_6_0; }

		//("else" else=Choreography)?
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//else=Choreography
		public Assignment getElseAssignment_7_1() { return cElseAssignment_7_1; }

		//Choreography
		public RuleCall getElseChoreographyParserRuleCall_7_1_0() { return cElseChoreographyParserRuleCall_7_1_0; }
	}

	public class LocalCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLocalAskCommandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cThreadAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_0_3_0 = (RuleCall)cThreadAssignment_0_3.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Assignment cQuestionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cQuestionExpressionParserRuleCall_0_5_0 = (RuleCall)cQuestionAssignment_0_5.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final Assignment cResultVariableAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cResultVariableIDTerminalRuleCall_0_7_0 = (RuleCall)cResultVariableAssignment_0_7.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_0_8 = (RuleCall)cGroup_0.eContents().get(8);
		private final Group cGroup_0_9 = (Group)cGroup_0.eContents().get(9);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_9_0 = (RuleCall)cGroup_0_9.eContents().get(0);
		private final Assignment cContinuationAssignment_0_9_1 = (Assignment)cGroup_0_9.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_0_9_1_0 = (RuleCall)cContinuationAssignment_0_9_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLocalShowCommandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cShowKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cThreadAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_1_3_0 = (RuleCall)cThreadAssignment_1_3.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Assignment cExpressionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_1_5_0 = (RuleCall)cExpressionAssignment_1_5.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_7_0 = (RuleCall)cGroup_1_7.eContents().get(0);
		private final Assignment cContinuationAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_1_7_1_0 = (RuleCall)cContinuationAssignment_1_7_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLocalAssignmentCommandAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLocalKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cThreadAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cThreadIDTerminalRuleCall_2_3_0 = (RuleCall)cThreadAssignment_2_3.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Assignment cVariableAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cVariableIDTerminalRuleCall_2_5_0 = (RuleCall)cVariableAssignment_2_5.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final Assignment cExpressionAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_2_7_0 = (RuleCall)cExpressionAssignment_2_7.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_8 = (RuleCall)cGroup_2.eContents().get(8);
		private final Group cGroup_2_9 = (Group)cGroup_2.eContents().get(9);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_9_0 = (RuleCall)cGroup_2_9.eContents().get(0);
		private final Assignment cContinuationAssignment_2_9_1 = (Assignment)cGroup_2_9.eContents().get(1);
		private final RuleCall cContinuationChoreographyParserRuleCall_2_9_1_0 = (RuleCall)cContinuationAssignment_2_9_1.eContents().get(0);
		
		//// Local thread code
		//LocalCode: // Ask a question to the user, e.g. ask@thr(question,result)
		//	{LocalAskCommand} "ask" AT thread=ID LPAREN question=Expression COMMA resultVariable=ID RPAREN (SEMICOLON
		//	continuation=Choreography)? | // Show some text, e.g. show@thr("Hello, world!")
		//	{LocalShowCommand} "show" AT thread=ID LPAREN expression=Expression RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		//	| // Make an internal state assignment
		//	{LocalAssignmentCommand} "local" AT thread=ID LPAREN variable=ID ASSIGN expression=Expression RPAREN (SEMICOLON
		//	continuation=Choreography)? // Optional continuation
		//;
		public ParserRule getRule() { return rule; }

		//// Ask a question to the user, e.g. ask@thr(question,result)
		//{LocalAskCommand} "ask" AT thread=ID LPAREN question=Expression COMMA resultVariable=ID RPAREN (SEMICOLON
		//continuation=Choreography)? | // Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand} "show" AT thread=ID LPAREN expression=Expression RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		//| // Make an internal state assignment
		//{LocalAssignmentCommand} "local" AT thread=ID LPAREN variable=ID ASSIGN expression=Expression RPAREN (SEMICOLON
		//continuation=Choreography)? // Optional continuation
		public Alternatives getAlternatives() { return cAlternatives; }

		//// Ask a question to the user, e.g. ask@thr(question,result)
		//{LocalAskCommand} "ask" AT thread=ID LPAREN question=Expression COMMA resultVariable=ID RPAREN (SEMICOLON
		//continuation=Choreography)?
		public Group getGroup_0() { return cGroup_0; }

		//// Ask a question to the user, e.g. ask@thr(question,result)
		//{LocalAskCommand}
		public Action getLocalAskCommandAction_0_0() { return cLocalAskCommandAction_0_0; }

		//"ask"
		public Keyword getAskKeyword_0_1() { return cAskKeyword_0_1; }

		//AT
		public RuleCall getATTerminalRuleCall_0_2() { return cATTerminalRuleCall_0_2; }

		//thread=ID
		public Assignment getThreadAssignment_0_3() { return cThreadAssignment_0_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_0_3_0() { return cThreadIDTerminalRuleCall_0_3_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_4() { return cLPARENTerminalRuleCall_0_4; }

		//question=Expression
		public Assignment getQuestionAssignment_0_5() { return cQuestionAssignment_0_5; }

		//Expression
		public RuleCall getQuestionExpressionParserRuleCall_0_5_0() { return cQuestionExpressionParserRuleCall_0_5_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_6() { return cCOMMATerminalRuleCall_0_6; }

		//resultVariable=ID
		public Assignment getResultVariableAssignment_0_7() { return cResultVariableAssignment_0_7; }

		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_0_7_0() { return cResultVariableIDTerminalRuleCall_0_7_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_8() { return cRPARENTerminalRuleCall_0_8; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_0_9() { return cGroup_0_9; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_9_0() { return cSEMICOLONTerminalRuleCall_0_9_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_0_9_1() { return cContinuationAssignment_0_9_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_0_9_1_0() { return cContinuationChoreographyParserRuleCall_0_9_1_0; }

		//// Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand} "show" AT thread=ID LPAREN expression=Expression RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
		public Group getGroup_1() { return cGroup_1; }

		//// Show some text, e.g. show@thr("Hello, world!")
		//{LocalShowCommand}
		public Action getLocalShowCommandAction_1_0() { return cLocalShowCommandAction_1_0; }

		//"show"
		public Keyword getShowKeyword_1_1() { return cShowKeyword_1_1; }

		//AT
		public RuleCall getATTerminalRuleCall_1_2() { return cATTerminalRuleCall_1_2; }

		//thread=ID
		public Assignment getThreadAssignment_1_3() { return cThreadAssignment_1_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_1_3_0() { return cThreadIDTerminalRuleCall_1_3_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_4() { return cLPARENTerminalRuleCall_1_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_5() { return cExpressionAssignment_1_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_5_0() { return cExpressionExpressionParserRuleCall_1_5_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_6() { return cRPARENTerminalRuleCall_1_6; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_1_7() { return cGroup_1_7; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_7_0() { return cSEMICOLONTerminalRuleCall_1_7_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_1_7_1() { return cContinuationAssignment_1_7_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_1_7_1_0() { return cContinuationChoreographyParserRuleCall_1_7_1_0; }

		//// Make an internal state assignment
		//{LocalAssignmentCommand} "local" AT thread=ID LPAREN variable=ID ASSIGN expression=Expression RPAREN (SEMICOLON
		//continuation=Choreography)? // Optional continuation
		public Group getGroup_2() { return cGroup_2; }

		//// Make an internal state assignment
		//{LocalAssignmentCommand}
		public Action getLocalAssignmentCommandAction_2_0() { return cLocalAssignmentCommandAction_2_0; }

		//"local"
		public Keyword getLocalKeyword_2_1() { return cLocalKeyword_2_1; }

		//AT
		public RuleCall getATTerminalRuleCall_2_2() { return cATTerminalRuleCall_2_2; }

		//thread=ID
		public Assignment getThreadAssignment_2_3() { return cThreadAssignment_2_3; }

		//ID
		public RuleCall getThreadIDTerminalRuleCall_2_3_0() { return cThreadIDTerminalRuleCall_2_3_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_4() { return cLPARENTerminalRuleCall_2_4; }

		//variable=ID
		public Assignment getVariableAssignment_2_5() { return cVariableAssignment_2_5; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_5_0() { return cVariableIDTerminalRuleCall_2_5_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2_6() { return cASSIGNTerminalRuleCall_2_6; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_7() { return cExpressionAssignment_2_7; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_7_0() { return cExpressionExpressionParserRuleCall_2_7_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_8() { return cRPARENTerminalRuleCall_2_8; }

		//(SEMICOLON continuation=Choreography)?
		public Group getGroup_2_9() { return cGroup_2_9; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_9_0() { return cSEMICOLONTerminalRuleCall_2_9_0; }

		//continuation=Choreography
		public Assignment getContinuationAssignment_2_9_1() { return cContinuationAssignment_2_9_1; }

		//Choreography
		public RuleCall getContinuationChoreographyParserRuleCall_2_9_1_0() { return cContinuationChoreographyParserRuleCall_2_9_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cSumExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSumExpressionSumExpressionParserRuleCall_0 = (RuleCall)cSumExpressionAssignment.eContents().get(0);
		
		/// *** Expressions and conditions *** / Expression:
		//	sumExpression=SumExpression;
		public ParserRule getRule() { return rule; }

		//sumExpression=SumExpression
		public Assignment getSumExpressionAssignment() { return cSumExpressionAssignment; }

		//SumExpression
		public RuleCall getSumExpressionSumExpressionParserRuleCall_0() { return cSumExpressionSumExpressionParserRuleCall_0; }
	}

	public class SumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChildrenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChildrenExpressionBasicTermParserRuleCall_0_0 = (RuleCall)cChildrenAssignment_0.eContents().get(0);
		private final Assignment cChildrenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildrenSumExpressionTermParserRuleCall_1_0 = (RuleCall)cChildrenAssignment_1.eContents().get(0);
		
		//SumExpression:
		//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
		public ParserRule getRule() { return rule; }

		//children+=ExpressionBasicTerm children+=SumExpressionTerm*
		public Group getGroup() { return cGroup; }

		//children+=ExpressionBasicTerm
		public Assignment getChildrenAssignment_0() { return cChildrenAssignment_0; }

		//ExpressionBasicTerm
		public RuleCall getChildrenExpressionBasicTermParserRuleCall_0_0() { return cChildrenExpressionBasicTermParserRuleCall_0_0; }

		//children+=SumExpressionTerm*
		public Assignment getChildrenAssignment_1() { return cChildrenAssignment_1; }

		//SumExpressionTerm
		public RuleCall getChildrenSumExpressionTermParserRuleCall_1_0() { return cChildrenSumExpressionTermParserRuleCall_1_0; }
	}

	public class SumExpressionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SumExpressionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSumExpressionAddTermAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSumExpressionSubtractTermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionBasicTermParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//SumExpressionTerm:
		//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
		//	expression=ExpressionBasicTerm;
		public ParserRule getRule() { return rule; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
		//expression=ExpressionBasicTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
		public Group getGroup_0() { return cGroup_0; }

		//{SumExpressionAddTerm}
		public Action getSumExpressionAddTermAction_0_0() { return cSumExpressionAddTermAction_0_0; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_1() { return cPLUSTerminalRuleCall_0_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_0_2_0() { return cExpressionExpressionBasicTermParserRuleCall_0_2_0; }

		//{SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
		public Group getGroup_1() { return cGroup_1; }

		//{SumExpressionSubtractTerm}
		public Action getSumExpressionSubtractTermAction_1_0() { return cSumExpressionSubtractTermAction_1_0; }

		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_1() { return cMINUSTerminalRuleCall_1_1; }

		//expression=ExpressionBasicTerm
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//ExpressionBasicTerm
		public RuleCall getExpressionExpressionBasicTermParserRuleCall_1_2_0() { return cExpressionExpressionBasicTermParserRuleCall_1_2_0; }
	}

	public class ExpressionBasicTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionBasicTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//ExpressionBasicTerm:
		//	variable=ID | constant=Constant | LPAREN expression=Expression RPAREN;
		public ParserRule getRule() { return rule; }

		//variable=ID | constant=Constant | LPAREN expression=Expression RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }

		//LPAREN expression=Expression RPAREN
		public Group getGroup_2() { return cGroup_2; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_0() { return cLPARENTerminalRuleCall_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_2() { return cRPARENTerminalRuleCall_2_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueINTTerminalRuleCall_0_0 = (RuleCall)cIntValueAssignment_0.eContents().get(0);
		private final Assignment cStrValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrValueAssignment_1.eContents().get(0);
		
		//Constant:
		//	intValue=INT | strValue=STRING;
		public ParserRule getRule() { return rule; }

		//intValue=INT | strValue=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//intValue=INT
		public Assignment getIntValueAssignment_0() { return cIntValueAssignment_0; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_0_0() { return cIntValueINTTerminalRuleCall_0_0; }

		//strValue=STRING
		public Assignment getStrValueAssignment_1() { return cStrValueAssignment_1; }

		//STRING
		public RuleCall getStrValueSTRINGTerminalRuleCall_1_0() { return cStrValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Assignment cCompareConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCompareConditionCompareConditionParserRuleCall_0 = (RuleCall)cCompareConditionAssignment.eContents().get(0);
		
		//// Condition. Example: x < 5
		//Condition:
		//	compareCondition=CompareCondition;
		public ParserRule getRule() { return rule; }

		//compareCondition=CompareCondition
		public Assignment getCompareConditionAssignment() { return cCompareConditionAssignment; }

		//CompareCondition
		public RuleCall getCompareConditionCompareConditionParserRuleCall_0() { return cCompareConditionCompareConditionParserRuleCall_0; }
	}

	public class CompareConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionExpressionParserRuleCall_0_0 = (RuleCall)cLeftExpressionAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorConditionOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionExpressionParserRuleCall_2_0 = (RuleCall)cRightExpressionAssignment_2.eContents().get(0);
		
		//CompareCondition:
		//	leftExpression=Expression operator=ConditionOperator rightExpression=Expression;
		public ParserRule getRule() { return rule; }

		//leftExpression=Expression operator=ConditionOperator rightExpression=Expression
		public Group getGroup() { return cGroup; }

		//leftExpression=Expression
		public Assignment getLeftExpressionAssignment_0() { return cLeftExpressionAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionExpressionParserRuleCall_0_0() { return cLeftExpressionExpressionParserRuleCall_0_0; }

		//operator=ConditionOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//ConditionOperator
		public RuleCall getOperatorConditionOperatorParserRuleCall_1_0() { return cOperatorConditionOperatorParserRuleCall_1_0; }

		//rightExpression=Expression
		public Assignment getRightExpressionAssignment_2() { return cRightExpressionAssignment_2; }

		//Expression
		public RuleCall getRightExpressionExpressionParserRuleCall_2_0() { return cRightExpressionExpressionParserRuleCall_2_0; }
	}

	public class ConditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLessAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLessLESSTerminalRuleCall_0_0 = (RuleCall)cLessAssignment_0.eContents().get(0);
		private final Assignment cEqualAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEqualEQUALTerminalRuleCall_1_0 = (RuleCall)cEqualAssignment_1.eContents().get(0);
		private final Assignment cGreaterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGreaterGREATERTerminalRuleCall_2_0 = (RuleCall)cGreaterAssignment_2.eContents().get(0);
		private final Assignment cNot_equalAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNot_equalNOT_EQUALTerminalRuleCall_3_0 = (RuleCall)cNot_equalAssignment_3.eContents().get(0);
		
		//ConditionOperator:
		//	less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL;
		public ParserRule getRule() { return rule; }

		//less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//less?=LESS
		public Assignment getLessAssignment_0() { return cLessAssignment_0; }

		//LESS
		public RuleCall getLessLESSTerminalRuleCall_0_0() { return cLessLESSTerminalRuleCall_0_0; }

		//equal?=EQUAL
		public Assignment getEqualAssignment_1() { return cEqualAssignment_1; }

		//EQUAL
		public RuleCall getEqualEQUALTerminalRuleCall_1_0() { return cEqualEQUALTerminalRuleCall_1_0; }

		//greater?=GREATER
		public Assignment getGreaterAssignment_2() { return cGreaterAssignment_2; }

		//GREATER
		public RuleCall getGreaterGREATERTerminalRuleCall_2_0() { return cGreaterGREATERTerminalRuleCall_2_0; }

		//not_equal?=NOT_EQUAL
		public Assignment getNot_equalAssignment_3() { return cNot_equalAssignment_3; }

		//NOT_EQUAL
		public RuleCall getNot_equalNOT_EQUALTerminalRuleCall_3_0() { return cNot_equalNOT_EQUALTerminalRuleCall_3_0; }
	}
	
	
	private ProgramElements pProgram;
	private PreambleElements pPreamble;
	private ProcedureElements pProcedure;
	private SessionProcedureParameterElements pSessionProcedureParameter;
	private ProtocolElements pProtocol;
	private SiteElements pSite;
	private GlobalTypeElements pGlobalType;
	private GlobalTypeInteractionElements pGlobalTypeInteraction;
	private GlobalTypeCallElements pGlobalTypeCall;
	private BranchGTypeElements pBranchGType;
	private DataTypeElements pDataType;
	private DelegationTypeElements pDelegationType;
	private BasicTypeElements pBasicType;
	private ChoreographyElements pChoreography;
	private StartElements pStart;
	private ThreadWithRoleElements pThreadWithRole;
	private InteractionElements pInteraction;
	private DelegationElements pDelegation;
	private CallElements pCall;
	private IfThenElseElements pIfThenElse;
	private LocalCodeElements pLocalCode;
	private ExpressionElements pExpression;
	private SumExpressionElements pSumExpression;
	private SumExpressionTermElements pSumExpressionTerm;
	private ExpressionBasicTermElements pExpressionBasicTerm;
	private ConstantElements pConstant;
	private ConditionElements pCondition;
	private CompareConditionElements pCompareCondition;
	private ConditionOperatorElements pConditionOperator;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tLSQUARE;
	private TerminalRule tRSQUARE;
	private TerminalRule tARROW;
	private TerminalRule tSEMICOLON;
	private TerminalRule tCOLON;
	private TerminalRule tPLUS;
	private TerminalRule tTIMES;
	private TerminalRule tMINUS;
	private TerminalRule tVERT;
	private TerminalRule tQUESTION_MARK;
	private TerminalRule tBANG;
	private TerminalRule tAT;
	private TerminalRule tASSIGN;
	private TerminalRule tDOT;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	private TerminalRule tCOMMA;
	private TerminalRule tLESS;
	private TerminalRule tEQUAL;
	private TerminalRule tGREATER;
	private TerminalRule tNOT_EQUAL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Main nonterminal
	//Program:
	//	"program" name=ID SEMICOLON preamble=Preamble procedures+=Procedure* "main" LCURLY choreography=Choreography RCURLY;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//// Preamble of a program
	//Preamble:
	//	{Preamble} (protocols+=Protocol // Protocol definitions
	//	// Site definitions
	//	| site+=Site)*;
	public PreambleElements getPreambleAccess() {
		return (pPreamble != null) ? pPreamble : (pPreamble = new PreambleElements());
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}

	//// Procedure definition, e.g. define myProcedure( thread )( k: protocol ) { Choreography }
	//Procedure:
	//	"define" name=ID LPAREN threadParameters+=ID (COMMA threadParameters+=ID)* RPAREN LPAREN
	//	(sessionParameters+=SessionProcedureParameter (COMMA sessionParameters+=SessionProcedureParameter)*)? RPAREN LCURLY
	//	choreography=Choreography RCURLY;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//SessionProcedureParameter:
	//	session=ID LSQUARE type=GlobalTypeCall COLON activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)*
	//	RSQUARE;
	public SessionProcedureParameterElements getSessionProcedureParameterAccess() {
		return (pSessionProcedureParameter != null) ? pSessionProcedureParameter : (pSessionProcedureParameter = new SessionProcedureParameterElements());
	}
	
	public ParserRule getSessionProcedureParameterRule() {
		return getSessionProcedureParameterAccess().getRule();
	}

	//// Definition of a protocol, associating a name to a multiparty behavioural type.
	//Protocol:
	//	"protocol" name=ID LCURLY type=GlobalType RCURLY;
	public ProtocolElements getProtocolAccess() {
		return (pProtocol != null) ? pProtocol : (pProtocol = new ProtocolElements());
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//// Definition of a site, associating a public channel name to a protocol.
	//Site:
	//	"public" name=ID COLON protocol=[Protocol];
	public SiteElements getSiteAccess() {
		return (pSite != null) ? pSite : (pSite = new SiteElements());
	}
	
	public ParserRule getSiteRule() {
		return getSiteAccess().getRule();
	}

	/// * 
	// * Multiparty behavioural type, or global type.
	// * Also denoted by G in the comments, for brevity (referring to the theoretical papers).
	// * / GlobalType:
	//	GlobalTypeInteraction | GlobalTypeCall;
	public GlobalTypeElements getGlobalTypeAccess() {
		return (pGlobalType != null) ? pGlobalType : (pGlobalType = new GlobalTypeElements());
	}
	
	public ParserRule getGlobalTypeRule() {
		return getGlobalTypeAccess().getRule();
	}

	//// Interaction. Example: A -> B: op(string); G
	//GlobalTypeInteraction:
	//	sender=ID ARROW receiver=ID COLON (branches+=BranchGType | LCURLY branches+=BranchGType (COMMA branches+=BranchGType)*
	//	RCURLY);
	public GlobalTypeInteractionElements getGlobalTypeInteractionAccess() {
		return (pGlobalTypeInteraction != null) ? pGlobalTypeInteraction : (pGlobalTypeInteraction = new GlobalTypeInteractionElements());
	}
	
	public ParserRule getGlobalTypeInteractionRule() {
		return getGlobalTypeInteractionAccess().getRule();
	}

	//// Protocol call
	//GlobalTypeCall:
	//	protocol=[Protocol];
	public GlobalTypeCallElements getGlobalTypeCallAccess() {
		return (pGlobalTypeCall != null) ? pGlobalTypeCall : (pGlobalTypeCall = new GlobalTypeCallElements());
	}
	
	public ParserRule getGlobalTypeCallRule() {
		return getGlobalTypeCallAccess().getRule();
	}

	//// Type of a branch. Example: op(DataType); G
	//BranchGType:
	//	operation=ID LPAREN dataType=DataType RPAREN (SEMICOLON continuation=GlobalType)?;
	public BranchGTypeElements getBranchGTypeAccess() {
		return (pBranchGType != null) ? pBranchGType : (pBranchGType = new BranchGTypeElements());
	}
	
	public ParserRule getBranchGTypeRule() {
		return getBranchGTypeAccess().getRule();
	}

	//// Data types. 
	//DataType:
	//	BasicType | DelegationType;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//// Type for a carried delegated session
	//DelegationType:
	//	type=GlobalTypeCall AT role=ID;
	public DelegationTypeElements getDelegationTypeAccess() {
		return (pDelegationType != null) ? pDelegationType : (pDelegationType = new DelegationTypeElements());
	}
	
	public ParserRule getDelegationTypeRule() {
		return getDelegationTypeAccess().getRule();
	}

	//// Basic types. Example: int
	//BasicType:
	//	{BasicType} name="int" | name="string" | name="bool" | name="void";
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	/// **
	// * A choreography.
	// * TODO: introduce recursion
	// * / Choreography:
	//	Start | Interaction | Delegation | Call | IfThenElse | LocalCode | LCURLY Choreography RCURLY;
	public ChoreographyElements getChoreographyAccess() {
		return (pChoreography != null) ? pChoreography : (pChoreography = new ChoreographyElements());
	}
	
	public ParserRule getChoreographyRule() {
		return getChoreographyAccess().getRule();
	}

	/// **
	// * Multiparty session start.
	// * Example: t1[role1],t2[role2] start t3[role3]: a(k)
	// * / Start: // List of active threads
	//	activeThreads+=ThreadWithRole (COMMA activeThreads+=ThreadWithRole)* "start" // List of service threads
	//	(serviceThreads+=ThreadWithRole (COMMA serviceThreads+=ThreadWithRole)*)? COLON // Public channel name
	//	publicChannel=[Site] // Protocol name
	//	//LSQUARE protocol = ID RSQUARE
	//	// Private session name
	//	LPAREN session=ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
	//;
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//// A thread with a role. Example: myThread[MyRole]
	//ThreadWithRole:
	//	thread=ID LSQUARE role=ID RSQUARE;
	public ThreadWithRoleElements getThreadWithRoleAccess() {
		return (pThreadWithRole != null) ? pThreadWithRole : (pThreadWithRole = new ThreadWithRoleElements());
	}
	
	public ParserRule getThreadWithRoleRule() {
		return getThreadWithRoleAccess().getRule();
	}

	/// ** 
	// * Interaction (data communication). Example: t1.(x + 2) -> t2.y : op(k)
	// * / Interaction:
	//	sender= // The sender thread
	//	ID (DOT senderExpression=ExpressionBasicTerm)? // The expression whose evaluation has to be sent
	//	ARROW receiver= // The receiver thread
	//	ID (DOT receiverVariable=ID)? // The variable in which the receiver stores the received value
	//	COLON operation=ID LPAREN session= // The session of the interaction
	//	ID RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
	//;
	public InteractionElements getInteractionAccess() {
		return (pInteraction != null) ? pInteraction : (pInteraction = new InteractionElements());
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}

	/// ** 
	// * Delegation (session communication). Example: t1 -> t2 : op(k(k'))
	// * / Delegation:
	//	sender= // The sender thread
	//	ID ARROW receiver= // The receiver thread
	//	ID COLON operation=ID LPAREN session= // The session of the interaction
	//	ID LPAREN delegatedSession= // The delegated session
	//	ID RPAREN RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
	//;
	public DelegationElements getDelegationAccess() {
		return (pDelegation != null) ? pDelegation : (pDelegation = new DelegationElements());
	}
	
	public ParserRule getDelegationRule() {
		return getDelegationAccess().getRule();
	}

	/// *
	// * A procedure call, e.g. myProc( thread[Role], thread2[Role2] )( k, k2 )
	// * / Call:
	//	procedure=[Procedure] LPAREN threads+=ID (COMMA threads+=ID)* RPAREN LPAREN (sessions+=ID (COMMA sessions+=ID)*)?
	//	RPAREN;
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	/// **
	// * if (condition)@thread { Choreography } else { Choreography }
	// * / IfThenElse:
	//	"if" LPAREN condition=Condition RPAREN AT thread=ID then=Choreography ("else" else=Choreography)?;
	public IfThenElseElements getIfThenElseAccess() {
		return (pIfThenElse != null) ? pIfThenElse : (pIfThenElse = new IfThenElseElements());
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//// Local thread code
	//LocalCode: // Ask a question to the user, e.g. ask@thr(question,result)
	//	{LocalAskCommand} "ask" AT thread=ID LPAREN question=Expression COMMA resultVariable=ID RPAREN (SEMICOLON
	//	continuation=Choreography)? | // Show some text, e.g. show@thr("Hello, world!")
	//	{LocalShowCommand} "show" AT thread=ID LPAREN expression=Expression RPAREN (SEMICOLON continuation=Choreography)? // Optional continuation
	//	| // Make an internal state assignment
	//	{LocalAssignmentCommand} "local" AT thread=ID LPAREN variable=ID ASSIGN expression=Expression RPAREN (SEMICOLON
	//	continuation=Choreography)? // Optional continuation
	//;
	public LocalCodeElements getLocalCodeAccess() {
		return (pLocalCode != null) ? pLocalCode : (pLocalCode = new LocalCodeElements());
	}
	
	public ParserRule getLocalCodeRule() {
		return getLocalCodeAccess().getRule();
	}

	/// *** Expressions and conditions *** / Expression:
	//	sumExpression=SumExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SumExpression:
	//	children+=ExpressionBasicTerm children+=SumExpressionTerm*;
	public SumExpressionElements getSumExpressionAccess() {
		return (pSumExpression != null) ? pSumExpression : (pSumExpression = new SumExpressionElements());
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}

	//SumExpressionTerm:
	//	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm | {SumExpressionSubtractTerm} MINUS
	//	expression=ExpressionBasicTerm;
	public SumExpressionTermElements getSumExpressionTermAccess() {
		return (pSumExpressionTerm != null) ? pSumExpressionTerm : (pSumExpressionTerm = new SumExpressionTermElements());
	}
	
	public ParserRule getSumExpressionTermRule() {
		return getSumExpressionTermAccess().getRule();
	}

	//ExpressionBasicTerm:
	//	variable=ID | constant=Constant | LPAREN expression=Expression RPAREN;
	public ExpressionBasicTermElements getExpressionBasicTermAccess() {
		return (pExpressionBasicTerm != null) ? pExpressionBasicTerm : (pExpressionBasicTerm = new ExpressionBasicTermElements());
	}
	
	public ParserRule getExpressionBasicTermRule() {
		return getExpressionBasicTermAccess().getRule();
	}

	//Constant:
	//	intValue=INT | strValue=STRING;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//// Condition. Example: x < 5
	//Condition:
	//	compareCondition=CompareCondition;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//CompareCondition:
	//	leftExpression=Expression operator=ConditionOperator rightExpression=Expression;
	public CompareConditionElements getCompareConditionAccess() {
		return (pCompareCondition != null) ? pCompareCondition : (pCompareCondition = new CompareConditionElements());
	}
	
	public ParserRule getCompareConditionRule() {
		return getCompareConditionAccess().getRule();
	}

	//ConditionOperator:
	//	less?=LESS | equal?=EQUAL | greater?=GREATER | not_equal?=NOT_EQUAL;
	public ConditionOperatorElements getConditionOperatorAccess() {
		return (pConditionOperator != null) ? pConditionOperator : (pConditionOperator = new ConditionOperatorElements());
	}
	
	public ParserRule getConditionOperatorRule() {
		return getConditionOperatorAccess().getRule();
	}

	//// Terminals
	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal LSQUARE:
	//	"[";
	public TerminalRule getLSQUARERule() {
		return (tLSQUARE != null) ? tLSQUARE : (tLSQUARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LSQUARE"));
	} 

	//terminal RSQUARE:
	//	"]";
	public TerminalRule getRSQUARERule() {
		return (tRSQUARE != null) ? tRSQUARE : (tRSQUARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RSQUARE"));
	} 

	//terminal ARROW:
	//	"->";
	public TerminalRule getARROWRule() {
		return (tARROW != null) ? tARROW : (tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARROW"));
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal TIMES:
	//	"*";
	public TerminalRule getTIMESRule() {
		return (tTIMES != null) ? tTIMES : (tTIMES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIMES"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal VERT:
	//	"|";
	public TerminalRule getVERTRule() {
		return (tVERT != null) ? tVERT : (tVERT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VERT"));
	} 

	//terminal QUESTION_MARK:
	//	"?";
	public TerminalRule getQUESTION_MARKRule() {
		return (tQUESTION_MARK != null) ? tQUESTION_MARK : (tQUESTION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTION_MARK"));
	} 

	//terminal BANG:
	//	"!";
	public TerminalRule getBANGRule() {
		return (tBANG != null) ? tBANG : (tBANG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BANG"));
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return (tAT != null) ? tAT : (tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT"));
	} 

	//terminal ASSIGN:
	//	"=";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal LESS:
	//	"<";
	public TerminalRule getLESSRule() {
		return (tLESS != null) ? tLESS : (tLESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS"));
	} 

	//terminal EQUAL:
	//	"==";
	public TerminalRule getEQUALRule() {
		return (tEQUAL != null) ? tEQUAL : (tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL"));
	} 

	//terminal GREATER:
	//	">";
	public TerminalRule getGREATERRule() {
		return (tGREATER != null) ? tGREATER : (tGREATER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GREATER"));
	} 

	//terminal NOT_EQUAL:
	//	"!=";
	public TerminalRule getNOT_EQUALRule() {
		return (tNOT_EQUAL != null) ? tNOT_EQUAL : (tNOT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_EQUAL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
