/***************************************************************************
 *   Copyright (C) 2011-2012 by Fabrizio Montesi <famontesi@gmail.com>     *
 *   Copyright (C) 2011 by Marco Carbone <carbonem@itu.dk>                 *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   For details about the authors of this software, see the AUTHORS file. *
 ***************************************************************************/

grammar org.chor.Chor with org.eclipse.xtext.common.Terminals

generate chor "http://www.chor-lang.org/Chor"

Program: // Main nonterminal
	'program' name=ID SEMICOLON
	preamble=Preamble
	(procedures+=Procedure)*
	'main'
	LCURLY
		(choreography=Choreography)
	RCURLY
;

// Preamble of a program
Preamble:
	{Preamble}
	(
		(protocols += Protocol) // Protocol definitions
		|
		(site += Site) // Site definitions
	)*
;

// Procedure definition, e.g. define myProcedure( thread )( k: protocol ) { Choreography }
Procedure:
	'define' name=ID
	LPAREN
		(threadParameters += ID) (COMMA threadParameters += ID)*
	RPAREN
	LPAREN
		((sessionParameters += SessionProcedureParameter) (COMMA sessionParameters += SessionProcedureParameter)*)?
	RPAREN
	LCURLY choreography=Choreography RCURLY
;

SessionProcedureParameter:
	session=ID
	LSQUARE type=GlobalTypeCall 
		COLON
		(activeThreads+=ThreadWithRole)
		(COMMA activeThreads+=ThreadWithRole)*
	RSQUARE
;

// Definition of a protocol, associating a name to a multiparty behavioural type.
Protocol:
	'protocol' name=ID LCURLY
		type=GlobalType
	RCURLY
;

// Definition of a site, associating a public channel name to a protocol.
Site:
	'public' name=ID COLON protocol=[Protocol]
;

/* 
 * Multiparty behavioural type, or global type.
 * Also denoted by G in the comments, for brevity (referring to the theoretical papers).
 */
GlobalType: GlobalTypeInteraction | GlobalTypeCall;

// Interaction. Example: A -> B: op(string); G
GlobalTypeInteraction:
	sender=ID ARROW receiver=ID
		COLON
		((
			branches += BranchGType
		)
		|
		(
			LCURLY
			(branches += BranchGType) (COMMA branches += BranchGType)*
			RCURLY
		))
;

// Protocol call
GlobalTypeCall: protocol=[Protocol] ;

// Type of a branch. Example: op(DataType); G
BranchGType:
	operation=ID LPAREN dataType=DataType RPAREN (SEMICOLON continuation=GlobalType)?
;

// Data types. 
DataType:
	BasicType | DelegationType
;

// Type for a carried delegated session
DelegationType:
	type=GlobalTypeCall AT role=ID 
;

// Basic types. Example: int
BasicType: {BasicType}
	name='int' | name='string' | name='bool' | name='void'
;

/**
 * A choreography.
 * TODO: introduce recursion
 */
Choreography:
	Start | Interaction | Delegation | Call
	| IfThenElse | LocalCode | LCURLY Choreography RCURLY
;

/**
 * Multiparty session start.
 * Example: t1[role1],t2[role2] start t3[role3]: a(k)
 */ 
Start:
	// List of active threads
	activeThreads += ThreadWithRole
	(COMMA activeThreads += ThreadWithRole)*
	
	'start'
	
	// List of service threads
	(
		serviceThreads += ThreadWithRole
		(COMMA serviceThreads += ThreadWithRole)*
	)?
	
	COLON
	
	// Public channel name
	publicChannel = [Site]
	// Protocol name
	//LSQUARE protocol = ID RSQUARE
	// Private session name
	LPAREN session = ID RPAREN
	(SEMICOLON 
	continuation=Choreography)?  // Optional continuation
;

// A thread with a role. Example: myThread[MyRole]
ThreadWithRole:
	thread=ID LSQUARE role=ID RSQUARE
;

/** 
 * Interaction (data communication). Example: t1.(x + 2) -> t2.y : op(k)
 */	
Interaction:
	sender=ID // The sender thread
	(DOT
		senderExpression=ExpressionBasicTerm
	)? // The expression whose evaluation has to be sent
	ARROW
	receiver=ID // The receiver thread
	(DOT
	receiverVariable=ID)? // The variable in which the receiver stores the received value
	COLON
	operation=ID
	LPAREN
	session=ID // The session of the interaction
	RPAREN
	(SEMICOLON
	continuation=Choreography)? // Optional continuation
;

/** 
 * Delegation (session communication). Example: t1 -> t2 : op(k(k'))
 */	
Delegation:
	sender=ID // The sender thread
	ARROW
	receiver=ID // The receiver thread
	COLON
	operation=ID
	LPAREN
	session=ID // The session of the interaction
		LPAREN
		delegatedSession=ID // The delegated session
		RPAREN
	RPAREN
	(SEMICOLON
	continuation=Choreography)? // Optional continuation
;

/*
 * A procedure call, e.g. myProc( thread[Role], thread2[Role2] )( k, k2 )
 */
Call:
	procedure=[Procedure]
	LPAREN
		(threads += ID) (COMMA threads += ID)*
	RPAREN
	LPAREN
		((sessions += ID) (COMMA sessions += ID)*)?
	RPAREN
;

/**
 * if (condition)@thread { Choreography } else { Choreography }
 */
IfThenElse:
	'if' LPAREN condition=Condition RPAREN AT thread=ID
	then=Choreography
	('else' else=Choreography)?
;

// Local thread code
LocalCode:
	// Ask a question to the user, e.g. ask@thr(question,result)
	{LocalAskCommand}
	'ask' AT thread=ID LPAREN question=Expression COMMA resultVariable=ID RPAREN
	(SEMICOLON continuation=Choreography)?
	|
	// Show some text, e.g. show@thr("Hello, world!")
	{LocalShowCommand}
	'show' AT thread=ID LPAREN expression=Expression RPAREN
	(SEMICOLON continuation=Choreography)?  // Optional continuation
	|
	// Make an internal state assignment
	{LocalAssignmentCommand}
	'local' AT thread=ID LPAREN variable=ID ASSIGN expression=Expression RPAREN
	(SEMICOLON continuation=Choreography)?  // Optional continuation
;

/*** Expressions and conditions ***/

Expression:
	sumExpression=SumExpression;

SumExpression:
	children+=ExpressionBasicTerm (children+=SumExpressionTerm)*;

SumExpressionTerm:
	{SumExpressionAddTerm} PLUS expression=ExpressionBasicTerm
	|
	{SumExpressionSubtractTerm} MINUS expression=ExpressionBasicTerm
;

ExpressionBasicTerm: variable=ID | constant=Constant | LPAREN expression=Expression RPAREN;

Constant:
	intValue=INT | strValue=STRING
;

// Condition. Example: x < 5
Condition:
	compareCondition=CompareCondition
;

CompareCondition:
	leftExpression=Expression
	operator=ConditionOperator
	rightExpression=Expression
;

ConditionOperator:
	less ?= LESS
	|
	equal ?= EQUAL
	|
	greater ?= GREATER
	|
	not_equal ?= NOT_EQUAL
;

// Terminals
terminal LCURLY: '{';
terminal RCURLY: '}';
terminal LSQUARE: '[';
terminal RSQUARE: ']';
terminal ARROW: '->';
terminal SEMICOLON: ';';
terminal COLON: ':';
terminal PLUS: '+';
terminal TIMES: '*';
terminal MINUS: '-';
terminal VERT: '|';
terminal QUESTION_MARK: '?';
terminal BANG: '!';
terminal AT: '@';
terminal ASSIGN: '=';
terminal DOT: '.';
terminal LPAREN: '(';
terminal RPAREN: ')';
terminal COMMA: ',';
terminal LESS: '<';
terminal EQUAL: '==';
terminal GREATER: '>';
terminal NOT_EQUAL: '!=';