/***************************************************************************
 *   Copyright (C) 2012 by Fabrizio Montesi <famontesi@gmail.com>          *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   For details about the authors of this software, see the AUTHORS file. *
 ***************************************************************************/

program instrument;

/**
 * Execute a command on an instrument, under authentication
 */
protocol AuthCommand {
	U -> A: username( string );
	U -> A: password( string );
	A -> U: {
	valid(Connect@U)
	,
	fail(void)
	}
}

/**
 * Connects a U(ser) to an I(nstrument) through a R(egistry)
 */
protocol Connect {
	U -> R: connect( string );
	R -> U: {
		ok( ExecCommand@C ),
		unavailable( void )
	} 
}

/**
 * A C(lient) executes a command on an (I)nstrument and gets a result 
 */
protocol ExecCommand {
	C -> I: {
	readTemperature(void);
		I -> C: result(string),
	readPressure(void);
		I -> C: result(string)
	}
}

public a : AuthCommand
public b : Connect
public instrument1 : ExecCommand
public instrument2 : ExecCommand

define findAndExec( u, r )( connect[Connect: u[U], r[R]] )
{
	ask@u( "[u] What instrument do you want to connect to? (inst1/inst2)", name );
	u.name -> r.name: connect( connect );
	if ( name == "inst1" )@r {
		r[C] start i[I]: instrument1( exec );
		r -> u: ok( connect( exec ) );
		u -> i: readTemperature( exec );
		i."28 C" -> u.temp: result( exec )
	} else if ( name == "inst2" )@r {
		r[C] start i[I]: instrument2( exec );
		r -> u: ok( connect( exec ) );
		u -> i: readTemperature( exec );
		i."2 C" -> u.temp: result( exec )
	} else {
		r -> u: unavailable( connect )
	}
}

main
{
	u[U] start a[A]: a( auth );
	ask@u( "[u] Insert username", username );
	ask@u( "[u] Insert password", pwd );
	u.username -> a.username: username( auth );
	u.pwd -> a.pwd: password( auth );
	ask@a( "[a] Confirm credentials? (yes/no) : " + username + " : " + password, confirm );
	if ( confirm == "yes" )@a {
		a[U] start r[R]: b( connect );
		a -> u: valid( auth( connect ) );
		
		findAndExec( u, r )( connect )
	} else {
		a -> u: fail( auth )
	}
}
